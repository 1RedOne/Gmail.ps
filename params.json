{"name":"Gmail.ps","tagline":"A PowerShell module for accessing your Gmail.","body":"# Gmail for PowerShell\r\n\r\nA PowerShell module for managing your Gmail, with all the tools you'll need. Search, \r\nread and send emails, archive, mark as read/unread, delete emails, \r\nand manage labels.\r\n\r\n__This module is still under development.__\r\n\r\n## Installation\r\n\r\nIf you have [PsGet](http://psget.net/) installed you can simply execute:\r\n\r\n```powershell\r\nInstall-Module Gmail.ps\r\n```\r\n\r\nOr install it manually:\r\n\r\n    git clone https://github.com/nikoblag/Gmail.ps.git\r\n    cd Gmail.ps\r\n    .\\install.ps1\r\n\r\n## Features\r\n\r\n* Read emails\r\n* Search emails\r\n* (Update) emails: label, archive, delete, mark as read/unread/spam, star\r\n* Manage labels\r\n* Move between labels/mailboxes\r\n* Automatic authentication, using the Windows Credential Manager\r\n\r\n## Usage:\r\n\r\n### Authenticating Gmail sessions\r\n\r\nTo authenticate a Gmail session, use `New-GmailSession` and provide your username and password. \r\nIf you want to be automatically logged in to your account, create a generic credential using the Windows Credential Manager: \r\ngo to 'Control Panel\\User Accounts and Family Safety\\Credential Manager', click 'Add a generic credential', then type your\r\nGmail username and password, and use `Gmail.ps:default` as address. \r\n\r\n```powershell\r\nPS> $gmail = New-GmailSession\r\nPS> # play with your gmail...\r\nPS> $gmail | Remove-GmailSession\r\n```\r\n\r\nIf you use `Invoke-GmailSession` and pass a block, the session will be passed into the block, \r\nand will be logged out after it's executed. Use `$args` to access the session or parameterize the block: \r\n\r\n```powershell\r\nPS> Invoke-GmailSession -ScriptBlock {\r\n>>      param($gmail) # to use $gmail instead of $args\r\n>>      $gmail | Get-Label\r\n>>  }\r\n```\r\n\r\nYou can also check which accounts are logged in at any time using `Get-GmailSession` or close all of them with `Clear-GmailSession`.\r\n\r\n### Gathering emails\r\n    \r\nGet the messages in the inbox:\r\n\r\n```powershell\r\nPS> $inbox = $gmail | Get-Mailbox\r\nPS> $inbox | Get-Message -Unread\r\n```\r\n\r\nGet the messages marked as Important by Gmail:\r\n\r\n```powershell\r\nPS> $gmail | Get-Mailbox \"Important\" | Get-Message\r\n```\r\n\r\nWith `Get-Mailbox` you can access the `\"All Mail\"`, `\"Starred\"`, `\"Drafts\"`, `\"Important\"`, `\"Sent Mail\"` and `\"Spam\"` folders\r\n\r\nFilter with some criteria:\r\n\r\n```powershell\r\nPS> $inbox | Get-Message -After \"2011-06-01\" -Before \"2012-01-01\"\r\nPS> $inbox | Get-Message -On \"2011-06-01\"\r\nPS> $inbox | Get-Message -From \"x@gmail.com\"\r\nPS> $inbox | Get-Message -To \"y@gmail.com\"\r\n```\r\n\r\nCombine flags and options:\r\n\r\n```powershell\r\nPS> $inbox | Get-Message -Unread -From \"myboss@gmail.com\"\r\n```\r\n\r\nBrowsing labeled emails is similar to working with the inbox.\r\n\r\n```powershell\r\nPS> $gmail | Get-Mailbox -Label \"Important\"\r\n```\r\n\r\nYou can count the messages too:\r\n\r\n```powershell\r\nPS> $inbox | Measure-Message\r\nPS> $inbox | Get-Message -Unread | Measure-Message\r\n```\r\n    \r\nAlso you can manipulate each message using block style. Remember that every message in a conversation/thread will come as a separate message.\r\n\r\n```powershell\r\nPS> $messages = $inbox | Get-Message -Unread | Select-Object -Last 10\r\nPS> foreach ($msg in $messages) {\r\n>>     $msg | Update-Message -Read # you can use -Unread, -Spam, -Star, -Unstar, -Archive too\r\n>> }\r\n```\r\n    \r\n### Working with emails!\r\n\r\nDelete all emails from X:\r\n\r\n```powershell\r\nPS> $inbox | Get-Message -From \"x@gmail.com\" | Remove-Message\r\n```\r\n\r\nSave all attachments in the \"Important\" label to a local folder. \r\nNote that without the `-Prefetch` parameter, no attachments will be downloaded from the server:\r\n\r\n```powershell\r\nPS> $gmail | Get-Mailbox -Label \"Important\" | Get-Message -Prefetch | Save-Attachment $folder\r\n```\r\n\r\nSave just the first attachment from the newest unread email:\r\n\r\n```powershell\r\nPS> $msg = $inbox | Get-Message -Unread -HasAttachment | Select-Object -Last 1\r\nPS> $fetchedMsg = $msg | Receive-Message # or use -Prefetch on Get-Message above\r\nPS> $fetchedMsg.Attachments[0].Save($location)\r\n```\r\n\r\nGet all labels applied to a message:\r\n\r\n```powershell\r\nPS> $msg | Get-Label\r\n```\r\n\r\nAdd a label to a message (or remove it):\r\n\r\n```powershell\r\nPS> $msg | Set-Label \"Important\"\r\nPS> $msg | Remove-Label \"Important\"\r\n```\r\n\r\nYou can apply multiple lables:\r\n\r\n```powershell\r\nPS> $msg | Set-Label \"Important\",\"Banking\"\r\n```\r\n\r\nThe example above will raise error when you don't have one of the specified labels. You can avoid this using:\r\n\r\n```powershell\r\nPS> $msg | Set-Label \"Important\",\"Banking\" -Force # If one of the labels does't exist, it will be automatically created now\r\n```\r\n\r\nYou can also move message to a label/mailbox:\r\n\r\n```powershell\r\nPS> $msg | Move-Message -Label \"Test\"\r\nPS> $msg | Move-Message \"All Mail\"\r\n```\r\n\r\n### Managing labels\r\n\r\nWith the Gmail module you can also manage your labels. You can get list of defined labels:\r\n\r\n```powershell\r\nPS> $gmail | Get-Label\r\n```\r\n\r\nCreate new label:\r\n\r\n```powershell\r\nPS> $gmail | New-Label -Name \"MyLabel\"\r\n```\r\n\r\nRemove labels:\r\n\r\n```powershell\r\nPS> $gmail | Remove-Label -Name \"MyLabel\"\r\n```\r\n\r\nOr check if given label exists:\r\n\r\n```powershell\r\nPS> $gmail | Get-Label -Name \"SomeLabel\" # returns null if the label doesn't exist\r\n```\r\n\r\nCmdlets that can take a label name as a parameter value (`Get-Message`, `Move-Message`, `Set-Label` and `Remove-Label`) support automatic completion:\r\n\r\n```powershell\r\nPS> $gmail | Remove-Label <tab> # use <tab> key to cycle through all existing labels\r\n```\r\n\r\n## Roadmap\r\n* Write tests\r\n* Send mail via Google's SMTP servers\r\n* Backup/restore all messages and labels\r\n\r\n## Contributing\r\n\r\n1. Fork it.\r\n2. Create a branch (`git checkout -b my_feature`)\r\n3. Commit your changes (`git commit -am \"Added Feature\"`)\r\n4. Push to the branch (`git push origin my_feature`)\r\n5. Open a [Pull Request](https://github.com/nikoblag/Gmail.ps/compare/)\r\n6. Enjoy an ice cream and wait\r\n\r\n## Author\r\n\r\n* Nikolay Blagoev [https://github.com/nikoblag]\r\n\r\n## Copyright\r\n\r\n* Copyright (c) 2013 Nikolay Blagoev\r\n* Copyright (c) 2013 Andy Edinborough - AE.Net.Mail library\r\n* Copyright (c) 2012 Tobias Burger - Get-StoredCredential cmdlet\r\n\r\nSee LICENSE for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}